//iteration 
import java.util.Scanner;
class BinarySearchIter {
    static int binarySearch(int arr[], int key) {
        int left = 0, right = arr.length - 1;
        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (arr[mid] == key) return mid;
            else if (arr[mid] < key) left = mid + 1;
            else right = mid - 1;
        }
        return -1;
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] arr = new int[n];
        for (int i = 0; i < n; i++) arr[i] = sc.nextInt();
        int key = sc.nextInt();
        sc.close();

        int result = binarySearch(arr, key);
        System.out.println(result);
    }
}
//recursion
import java.util.Scanner;

class BinarySearchRec {
    static int binarySearch(int arr[], int key, int left, int right) {
        if (left > right) return -1;
        int mid = left + (right - left) / 2;
        if (arr[mid] == key) return mid;
        else if (arr[mid] < key) return binarySearch(arr, key, mid + 1, right);
        else return binarySearch(arr, key, left, mid - 1);
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] arr = new int[n];
        for (int i = 0; i < n; i++) arr[i] = sc.nextInt();
        int key = sc.nextInt();
        sc.close();

        int result = binarySearch(arr, key, 0, n - 1);
        System.out.println(result);
    }
}
